
Receiver MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000086e  00000902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080006c  0080006c  0000090e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023b6  00000000  00000000  00000b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bdc  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cd1  00000000  00000000  00003af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005a4  00000000  00000000  000047c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008e9  00000000  00000000  00004d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001595  00000000  00000000  00005651  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00006be6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_1>
   8:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_2>
   c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_3>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_13>
  38:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_14>
  3c:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_15>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	ce 01       	movw	r24, r28
  56:	c9 01       	movw	r24, r18
  58:	c7 01       	movw	r24, r14
  5a:	bd 01       	movw	r22, r26
  5c:	b8 01       	movw	r22, r16
  5e:	ae 01       	movw	r20, r28
  60:	a4 01       	movw	r20, r8
  62:	d3 01       	movw	r26, r6
  64:	0b 02       	muls	r16, r27
  66:	06 02       	muls	r16, r22
  68:	04 02       	muls	r16, r20
  6a:	fb 01       	movw	r30, r22
  6c:	f6 01       	movw	r30, r12
  6e:	ec 01       	movw	r28, r24
  70:	e2 01       	movw	r28, r4
  72:	10 02       	muls	r17, r16
  74:	3e 02       	muls	r19, r30
  76:	39 02       	muls	r19, r25
  78:	37 02       	muls	r19, r23
  7a:	2d 02       	muls	r18, r29
  7c:	24 02       	muls	r18, r20
  7e:	1f 02       	muls	r17, r31
  80:	15 02       	muls	r17, r21
  82:	43 02       	muls	r20, r19

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	10 e0       	ldi	r17, 0x00	; 0
  92:	a0 e6       	ldi	r26, 0x60	; 96
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	ee e6       	ldi	r30, 0x6E	; 110
  98:	f8 e0       	ldi	r31, 0x08	; 8
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	ac 36       	cpi	r26, 0x6C	; 108
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	ac e6       	ldi	r26, 0x6C	; 108
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a5 38       	cpi	r26, 0x85	; 133
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 9c 03 	call	0x738	; 0x738 <main>
  ba:	0c 94 35 04 	jmp	0x86a	; 0x86a <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <__vector_1>:
{
	SeTBit(SREG,7);
}

void __vector_1 (void)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	if(gptr[0]!=NULL)
  e4:	e0 91 60 00 	lds	r30, 0x0060
  e8:	f0 91 61 00 	lds	r31, 0x0061
  ec:	ef 3f       	cpi	r30, 0xFF	; 255
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	f8 07       	cpc	r31, r24
  f2:	09 f0       	breq	.+2      	; 0xf6 <__vector_1+0x34>
		(*gptr[0])();
  f4:	09 95       	icall
	}
}

void MCU_voidEnableGlobalInt(void)
{
	SeTBit(SREG,7);
  f6:	8f b7       	in	r24, 0x3f	; 63
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8f bf       	out	0x3f, r24	; 63
void __vector_1 (void)
{
	if(gptr[0]!=NULL)
		(*gptr[0])();
	MCU_voidEnableGlobalInt();
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	7f 91       	pop	r23
 10a:	6f 91       	pop	r22
 10c:	5f 91       	pop	r21
 10e:	4f 91       	pop	r20
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_2>:

void __vector_2 (void)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	if(gptr[1]!=NULL)
 140:	e0 91 62 00 	lds	r30, 0x0062
 144:	f0 91 63 00 	lds	r31, 0x0063
 148:	ef 3f       	cpi	r30, 0xFF	; 255
 14a:	8f e0       	ldi	r24, 0x0F	; 15
 14c:	f8 07       	cpc	r31, r24
 14e:	09 f0       	breq	.+2      	; 0x152 <__vector_2+0x34>
		(*gptr[1])();
 150:	09 95       	icall
	}
}

void MCU_voidEnableGlobalInt(void)
{
	SeTBit(SREG,7);
 152:	8f b7       	in	r24, 0x3f	; 63
 154:	80 68       	ori	r24, 0x80	; 128
 156:	8f bf       	out	0x3f, r24	; 63
void __vector_2 (void)
{
	if(gptr[1]!=NULL)
		(*gptr[1])();
	MCU_voidEnableGlobalInt();
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	7f 91       	pop	r23
 166:	6f 91       	pop	r22
 168:	5f 91       	pop	r21
 16a:	4f 91       	pop	r20
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__vector_3>:

void __vector_3 (void)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	if(gptr[2]!=NULL)
 19c:	e0 91 64 00 	lds	r30, 0x0064
 1a0:	f0 91 65 00 	lds	r31, 0x0065
 1a4:	ef 3f       	cpi	r30, 0xFF	; 255
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	f8 07       	cpc	r31, r24
 1aa:	09 f0       	breq	.+2      	; 0x1ae <__vector_3+0x34>
		(*gptr[2])();
 1ac:	09 95       	icall
	}
}

void MCU_voidEnableGlobalInt(void)
{
	SeTBit(SREG,7);
 1ae:	8f b7       	in	r24, 0x3f	; 63
 1b0:	80 68       	ori	r24, 0x80	; 128
 1b2:	8f bf       	out	0x3f, r24	; 63
void __vector_3 (void)
{
	if(gptr[2]!=NULL)
		(*gptr[2])();
	MCU_voidEnableGlobalInt();
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <DIO_Init_PIN>:
			}
	}
	
}

void DIO_Init_PIN(DIO_Configure *DIO,pinNumber pinNum ,Mode mode){//DIO_Init_PIN(PINB,num,mode output);
 1d6:	fc 01       	movw	r30, r24
	switch(mode){
 1d8:	41 30       	cpi	r20, 0x01	; 1
 1da:	11 f1       	breq	.+68     	; 0x220 <DIO_Init_PIN+0x4a>
 1dc:	90 f0       	brcs	.+36     	; 0x202 <DIO_Init_PIN+0x2c>
 1de:	42 30       	cpi	r20, 0x02	; 2
 1e0:	79 f4       	brne	.+30     	; 0x200 <DIO_Init_PIN+0x2a>
		case InputPullup:
		SeTBit(DIO->port.Fullbits,pinNum);
		ClearBit(DIO->DDR.Fullbits,pinNum);
		break;
		case Output:
		SeTBit(DIO->DDR.Fullbits,pinNum);
 1e2:	21 81       	ldd	r18, Z+1	; 0x01
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	06 2e       	mov	r0, r22
 1ea:	01 c0       	rjmp	.+2      	; 0x1ee <DIO_Init_PIN+0x18>
 1ec:	88 0f       	add	r24, r24
 1ee:	0a 94       	dec	r0
 1f0:	ea f7       	brpl	.-6      	; 0x1ec <DIO_Init_PIN+0x16>
 1f2:	28 2b       	or	r18, r24
 1f4:	21 83       	std	Z+1, r18	; 0x01
		ClearBit(DIO->port.Fullbits,pinNum);
 1f6:	92 81       	ldd	r25, Z+2	; 0x02
 1f8:	80 95       	com	r24
 1fa:	89 23       	and	r24, r25
 1fc:	82 83       	std	Z+2, r24	; 0x02
 1fe:	08 95       	ret
 200:	08 95       	ret
		case InputFloat:
		ClearBit(DIO->port.Fullbits,pinNum);
		ClearBit(DIO->DDR.Fullbits,pinNum);
		break;
		case InputPullup:
		SeTBit(DIO->port.Fullbits,pinNum);
 202:	22 81       	ldd	r18, Z+2	; 0x02
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	06 2e       	mov	r0, r22
 20a:	01 c0       	rjmp	.+2      	; 0x20e <DIO_Init_PIN+0x38>
 20c:	88 0f       	add	r24, r24
 20e:	0a 94       	dec	r0
 210:	ea f7       	brpl	.-6      	; 0x20c <DIO_Init_PIN+0x36>
 212:	28 2b       	or	r18, r24
 214:	22 83       	std	Z+2, r18	; 0x02
		ClearBit(DIO->DDR.Fullbits,pinNum);
 216:	91 81       	ldd	r25, Z+1	; 0x01
 218:	80 95       	com	r24
 21a:	89 23       	and	r24, r25
 21c:	81 83       	std	Z+1, r24	; 0x01
		break;
 21e:	08 95       	ret
}

void DIO_Init_PIN(DIO_Configure *DIO,pinNumber pinNum ,Mode mode){//DIO_Init_PIN(PINB,num,mode output);
	switch(mode){
		case InputFloat:
		ClearBit(DIO->port.Fullbits,pinNum);
 220:	22 81       	ldd	r18, Z+2	; 0x02
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	06 2e       	mov	r0, r22
 228:	01 c0       	rjmp	.+2      	; 0x22c <DIO_Init_PIN+0x56>
 22a:	88 0f       	add	r24, r24
 22c:	0a 94       	dec	r0
 22e:	ea f7       	brpl	.-6      	; 0x22a <DIO_Init_PIN+0x54>
 230:	80 95       	com	r24
 232:	28 23       	and	r18, r24
 234:	22 83       	std	Z+2, r18	; 0x02
		ClearBit(DIO->DDR.Fullbits,pinNum);
 236:	91 81       	ldd	r25, Z+1	; 0x01
 238:	98 23       	and	r25, r24
 23a:	91 83       	std	Z+1, r25	; 0x01
		break;
 23c:	08 95       	ret

0000023e <Timer_Init>:
/*Description: Timer/Counter Initialization
 * Input     : Timer_Configuration_S* Confg_S (Struct contain : Timer Channel, Prescaler , Mode as described in Struct)
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
 23e:	fc 01       	movw	r30, r24
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
	if(Confg_S->Timer_Channel == (TIMER0 ))
 240:	80 81       	ld	r24, Z
 242:	81 11       	cpse	r24, r1
 244:	19 c0       	rjmp	.+50     	; 0x278 <Timer_Init+0x3a>
	{ Prescale_arr[0]=Confg_S->Timer_Psc;
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	80 93 6c 00 	sts	0x006C, r24
	 switch(Confg_S->Timer_Mode)
 24c:	82 81       	ldd	r24, Z+2	; 0x02
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	59 f1       	breq	.+86     	; 0x2a8 <Timer_Init+0x6a>
 252:	c0 f1       	brcs	.+112    	; 0x2c4 <Timer_Init+0x86>
 254:	8a 30       	cpi	r24, 0x0A	; 10
 256:	f1 f1       	breq	.+124    	; 0x2d4 <Timer_Init+0x96>
 258:	8b 30       	cpi	r24, 0x0B	; 11
 25a:	61 f4       	brne	.+24     	; 0x274 <Timer_Init+0x36>
		SeTBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
	DIO_Init_PIN(PINB,3 ,Output );
		break;
	case FastPWM :
		SeTBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
 25c:	83 b7       	in	r24, 0x33	; 51
 25e:	80 64       	ori	r24, 0x40	; 64
 260:	83 bf       	out	0x33, r24	; 51
		SeTBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
 262:	83 b7       	in	r24, 0x33	; 51
 264:	88 60       	ori	r24, 0x08	; 8
 266:	83 bf       	out	0x33, r24	; 51
		DIO_Init_PIN(PINB,3 ,Output );
		break;
	case FastPWM :
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
		DIO_Init_PIN(PINB,3 ,Output );
 268:	42 e0       	ldi	r20, 0x02	; 2
 26a:	63 e0       	ldi	r22, 0x03	; 3
 26c:	86 e3       	ldi	r24, 0x36	; 54
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_Init_PIN>
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 274:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case FastPWM :
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
		DIO_Init_PIN(PINB,3 ,Output );
	break;
 276:	08 95       	ret
		DIO_Init_PIN(PINB,3 ,Output );
	break;
	}

	}
		else if(Confg_S->Timer_Channel == ( TIMER2))
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	21 f0       	breq	.+8      	; 0x284 <Timer_Init+0x46>
		DIO_Init_PIN(PINB,3 ,Output );
	break;
	}

	}
		else if(Confg_S->Timer_Channel == (TIMER1 ))
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	d9 f0       	breq	.+54     	; 0x2b6 <Timer_Init+0x78>


	else 

	{
		Local_u8Error=ERROR_NOK ;
 280:	81 e0       	ldi	r24, 0x01	; 1



	return Local_u8Error;
	
}
 282:	08 95       	ret
	break;
	}

	}
		else if(Confg_S->Timer_Channel == ( TIMER2))
	{     Prescale_arr[2]=Confg_S->Timer_Psc;
 284:	81 81       	ldd	r24, Z+1	; 0x01
 286:	80 93 6e 00 	sts	0x006E, r24
			switch(Confg_S->Timer_Mode)
 28a:	82 81       	ldd	r24, Z+2	; 0x02
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	c1 f1       	breq	.+112    	; 0x300 <Timer_Init+0xc2>
 290:	78 f1       	brcs	.+94     	; 0x2f0 <Timer_Init+0xb2>
 292:	8a 30       	cpi	r24, 0x0A	; 10
 294:	31 f1       	breq	.+76     	; 0x2e2 <Timer_Init+0xa4>
 296:	8b 30       	cpi	r24, 0x0B	; 11
 298:	69 f7       	brne	.-38     	; 0x274 <Timer_Init+0x36>
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
		ClearBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
		DIO_Init_PIN(PINB,3 ,Output );
		break;
	case FastPWM :
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
 29a:	85 b5       	in	r24, 0x25	; 37
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	85 bd       	out	0x25, r24	; 37
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
 2a0:	85 b5       	in	r24, 0x25	; 37
 2a2:	88 60       	ori	r24, 0x08	; 8
 2a4:	85 bd       	out	0x25, r24	; 37
 2a6:	e0 cf       	rjmp	.-64     	; 0x268 <Timer_Init+0x2a>
	case Normal:
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
		break;
	case PWM_PhaseCorrect:
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
 2a8:	83 b7       	in	r24, 0x33	; 51
 2aa:	87 7f       	andi	r24, 0xF7	; 247
 2ac:	83 bf       	out	0x33, r24	; 51
		SeTBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
 2ae:	83 b7       	in	r24, 0x33	; 51
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	83 bf       	out	0x33, r24	; 51
 2b4:	d9 cf       	rjmp	.-78     	; 0x268 <Timer_Init+0x2a>
	}

	}
		else if(Confg_S->Timer_Channel == (TIMER1 ))
		{
		Prescale_arr[1]=Confg_S->Timer_Psc;
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	90 93 6d 00 	sts	0x006D, r25
	TIMER1_TCCR1A = 0;
 2bc:	1f bc       	out	0x2f, r1	; 47
	TIMER1_TCCR1B = 1;
 2be:	8e bd       	out	0x2e, r24	; 46
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	08 95       	ret
	if(Confg_S->Timer_Channel == (TIMER0 ))
	{ Prescale_arr[0]=Confg_S->Timer_Psc;
	 switch(Confg_S->Timer_Mode)
	{
	case Normal:
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
 2c4:	83 b7       	in	r24, 0x33	; 51
 2c6:	8f 7b       	andi	r24, 0xBF	; 191
 2c8:	83 bf       	out	0x33, r24	; 51
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
 2ca:	83 b7       	in	r24, 0x33	; 51
 2cc:	87 7f       	andi	r24, 0xF7	; 247
 2ce:	83 bf       	out	0x33, r24	; 51
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 2d0:	80 e0       	ldi	r24, 0x00	; 0
	 switch(Confg_S->Timer_Mode)
	{
	case Normal:
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
		break;
 2d2:	08 95       	ret
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
		SeTBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
		DIO_Init_PIN(PINB,3 ,Output );
		break;
	case CTC:
		SeTBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM01);
 2d4:	83 b7       	in	r24, 0x33	; 51
 2d6:	88 60       	ori	r24, 0x08	; 8
 2d8:	83 bf       	out	0x33, r24	; 51
		ClearBit(TIMER0_TCCR0,TIMER0_TCCR0_WGM00);
 2da:	83 b7       	in	r24, 0x33	; 51
 2dc:	8f 7b       	andi	r24, 0xBF	; 191
 2de:	83 bf       	out	0x33, r24	; 51
 2e0:	c3 cf       	rjmp	.-122    	; 0x268 <Timer_Init+0x2a>
		ClearBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
	DIO_Init_PIN(PINB,3 ,Output );
		break;
	case CTC:
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
 2e2:	85 b5       	in	r24, 0x25	; 37
 2e4:	88 60       	ori	r24, 0x08	; 8
 2e6:	85 bd       	out	0x25, r24	; 37
		ClearBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
 2e8:	85 b5       	in	r24, 0x25	; 37
 2ea:	8f 7b       	andi	r24, 0xBF	; 191
		DIO_Init_PIN(PINB,3 ,Output );
		break;
	case FastPWM :
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
 2ec:	85 bd       	out	0x25, r24	; 37
 2ee:	bc cf       	rjmp	.-136    	; 0x268 <Timer_Init+0x2a>
		else if(Confg_S->Timer_Channel == ( TIMER2))
	{     Prescale_arr[2]=Confg_S->Timer_Psc;
			switch(Confg_S->Timer_Mode)
	{
	case Normal:
		ClearBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
 2f0:	85 b5       	in	r24, 0x25	; 37
 2f2:	8f 7b       	andi	r24, 0xBF	; 191
 2f4:	85 bd       	out	0x25, r24	; 37
		ClearBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	87 7f       	andi	r24, 0xF7	; 247
 2fa:	85 bd       	out	0x25, r24	; 37
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 2fc:	80 e0       	ldi	r24, 0x00	; 0
			switch(Confg_S->Timer_Mode)
	{
	case Normal:
		ClearBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
		ClearBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
		break;
 2fe:	08 95       	ret
	case PWM_PhaseCorrect:
		ClearBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
 300:	85 b5       	in	r24, 0x25	; 37
 302:	87 7f       	andi	r24, 0xF7	; 247
 304:	85 bd       	out	0x25, r24	; 37
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
 306:	85 b5       	in	r24, 0x25	; 37
 308:	80 64       	ori	r24, 0x40	; 64
		ClearBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
		DIO_Init_PIN(PINB,3 ,Output );
		break;
	case FastPWM :
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM20);
		SeTBit(TIMER2_TCCR2,TIMER2_TCCR2_WGM21);
 30a:	85 bd       	out	0x25, r24	; 37
 30c:	ad cf       	rjmp	.-166    	; 0x268 <Timer_Init+0x2a>

0000030e <Timer_Start>:
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
	if(Copy_uint8_TimerChannel == (TIMER0 ))
 30e:	81 11       	cpse	r24, r1
 310:	05 c0       	rjmp	.+10     	; 0x31c <Timer_Start+0xe>
	{
	switch(Copy_uint32_TickCounts)
 312:	48 30       	cpi	r20, 0x08	; 8
 314:	51 05       	cpc	r21, r1
 316:	48 f0       	brcs	.+18     	; 0x32a <Timer_Start+0x1c>
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 318:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case F_EXTERNAL_CLOCK_RISING_TIMER_0: //7
		SeTBit(TIMER0_TCCR0,CS00);
		SeTBit(TIMER0_TCCR0,CS01);
		SeTBit(TIMER0_TCCR0,CS02);
		break;
 31a:	08 95       	ret
	}

	}
	else if (Copy_uint8_TimerChannel == ( TIMER1 ))
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	59 f0       	breq	.+22     	; 0x336 <Timer_Start+0x28>
		SeTBit(TIMER1_TCCR1B,CS02);
		break;
	}
	}

	else if (Copy_uint8_TimerChannel == ( TIMER2 ))
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	09 f4       	brne	.+2      	; 0x326 <Timer_Start+0x18>
 324:	45 c0       	rjmp	.+138    	; 0x3b0 <Timer_Start+0xa2>
	}	

	else 

	{
		Local_u8Error=ERROR_NOK ;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	08 95       	ret
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
	if(Copy_uint8_TimerChannel == (TIMER0 ))
	{
	switch(Copy_uint32_TickCounts)
 32a:	fa 01       	movw	r30, r20
 32c:	e6 5d       	subi	r30, 0xD6	; 214
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
		SeTBit(TIMER0_TCCR0,CS02);
		SeTBit(TIMER0_TCCR0,CS01);

		break;
	case F_EXTERNAL_CLOCK_RISING_TIMER_0: //7
		SeTBit(TIMER0_TCCR0,CS00);
 330:	83 b7       	in	r24, 0x33	; 51
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
	if(Copy_uint8_TimerChannel == (TIMER0 ))
	{
	switch(Copy_uint32_TickCounts)
 332:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__tablejump2__>

	}
	else if (Copy_uint8_TimerChannel == ( TIMER1 ))
	{
		
		switch(Copy_uint32_TickCounts)
 336:	48 30       	cpi	r20, 0x08	; 8
 338:	51 05       	cpc	r21, r1
 33a:	70 f7       	brcc	.-36     	; 0x318 <Timer_Start+0xa>
 33c:	fa 01       	movw	r30, r20
 33e:	ee 5c       	subi	r30, 0xCE	; 206
 340:	ff 4f       	sbci	r31, 0xFF	; 255
		SeTBit(TIMER1_TCCR1B,CS02);
		SeTBit(TIMER1_TCCR1B,CS01);

		break;
	case F_EXTERNAL_CLOCK_RISING_TIMER_1: //7
		SeTBit(TIMER1_TCCR1B,CS00);
 342:	8e b5       	in	r24, 0x2e	; 46

	}
	else if (Copy_uint8_TimerChannel == ( TIMER1 ))
	{
		
		switch(Copy_uint32_TickCounts)
 344:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__tablejump2__>
		SeTBit(TIMER0_TCCR0,CS00);
		ClearBit(TIMER0_TCCR0,CS01);
		SeTBit(TIMER0_TCCR0,CS02);
		break;
	case F_EXTERNAL_CLOCK_FALLING_TIMER_0: //6
		ClearBit(TIMER0_TCCR0,CS00);
 348:	8e 7f       	andi	r24, 0xFE	; 254
 34a:	83 bf       	out	0x33, r24	; 51
		SeTBit(TIMER0_TCCR0,CS02);
 34c:	83 b7       	in	r24, 0x33	; 51
 34e:	84 60       	ori	r24, 0x04	; 4
 350:	83 bf       	out	0x33, r24	; 51
		SeTBit(TIMER0_TCCR0,CS01);
 352:	83 b7       	in	r24, 0x33	; 51
 354:	82 60       	ori	r24, 0x02	; 2
 356:	83 bf       	out	0x33, r24	; 51
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 358:	80 e0       	ldi	r24, 0x00	; 0
	case F_EXTERNAL_CLOCK_FALLING_TIMER_0: //6
		ClearBit(TIMER0_TCCR0,CS00);
		SeTBit(TIMER0_TCCR0,CS02);
		SeTBit(TIMER0_TCCR0,CS01);

		break;
 35a:	08 95       	ret
		ClearBit(TIMER0_TCCR0,CS00);
		ClearBit(TIMER0_TCCR0,CS01);
		SeTBit(TIMER0_TCCR0,CS02);
		break;
	case F_CPU_CLOCK_1024_TIMER_0: //5
		SeTBit(TIMER0_TCCR0,CS00);
 35c:	81 60       	ori	r24, 0x01	; 1
 35e:	83 bf       	out	0x33, r24	; 51
		ClearBit(TIMER0_TCCR0,CS01);
 360:	83 b7       	in	r24, 0x33	; 51
 362:	8d 7f       	andi	r24, 0xFD	; 253
		SeTBit(TIMER0_TCCR0,CS01);

		break;
	case F_EXTERNAL_CLOCK_RISING_TIMER_0: //7
		SeTBit(TIMER0_TCCR0,CS00);
		SeTBit(TIMER0_TCCR0,CS01);
 364:	83 bf       	out	0x33, r24	; 51
		SeTBit(TIMER0_TCCR0,CS02);
 366:	83 b7       	in	r24, 0x33	; 51
 368:	84 60       	ori	r24, 0x04	; 4
 36a:	83 bf       	out	0x33, r24	; 51
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 36c:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case F_EXTERNAL_CLOCK_RISING_TIMER_0: //7
		SeTBit(TIMER0_TCCR0,CS00);
		SeTBit(TIMER0_TCCR0,CS01);
		SeTBit(TIMER0_TCCR0,CS02);
		break;
 36e:	08 95       	ret
		SeTBit(TIMER0_TCCR0,CS00);
		SeTBit(TIMER0_TCCR0,CS01);
		ClearBit(TIMER0_TCCR0,CS02);
		break;
	case F_CPU_CLOCK_256_TIMER_0: //4
		ClearBit(TIMER0_TCCR0,CS00);
 370:	8e 7f       	andi	r24, 0xFE	; 254
 372:	83 bf       	out	0x33, r24	; 51
		ClearBit(TIMER0_TCCR0,CS01);
 374:	83 b7       	in	r24, 0x33	; 51
 376:	8d 7f       	andi	r24, 0xFD	; 253
 378:	f5 cf       	rjmp	.-22     	; 0x364 <Timer_Start+0x56>
		ClearBit(TIMER0_TCCR0,CS00);
		SeTBit(TIMER0_TCCR0,CS01);
		ClearBit(TIMER0_TCCR0,CS02);
		break;
	case F_CPU_CLOCK_64_TIMER_0: //3
		SeTBit(TIMER0_TCCR0,CS00);
 37a:	81 60       	ori	r24, 0x01	; 1
 37c:	83 bf       	out	0x33, r24	; 51
		SeTBit(TIMER0_TCCR0,CS01);
 37e:	83 b7       	in	r24, 0x33	; 51
 380:	82 60       	ori	r24, 0x02	; 2
 382:	83 bf       	out	0x33, r24	; 51
		ClearBit(TIMER0_TCCR0,CS02);
 384:	83 b7       	in	r24, 0x33	; 51
 386:	8b 7f       	andi	r24, 0xFB	; 251
 388:	83 bf       	out	0x33, r24	; 51
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 38a:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case F_CPU_CLOCK_64_TIMER_0: //3
		SeTBit(TIMER0_TCCR0,CS00);
		SeTBit(TIMER0_TCCR0,CS01);
		ClearBit(TIMER0_TCCR0,CS02);
		break;
 38c:	08 95       	ret
		SeTBit(TIMER0_TCCR0,CS00);
		ClearBit(TIMER0_TCCR0,CS01);
		ClearBit(TIMER0_TCCR0,CS02);
		break;
	case F_CPU_CLOCK_8_TIMER_0 : //2
		ClearBit(TIMER0_TCCR0,CS00);
 38e:	8e 7f       	andi	r24, 0xFE	; 254
 390:	f5 cf       	rjmp	.-22     	; 0x37c <Timer_Start+0x6e>
		ClearBit(TIMER0_TCCR0,CS00);
		ClearBit(TIMER0_TCCR0,CS01);
		ClearBit(TIMER0_TCCR0,CS02);
		break;
	case F_CPU_CLOCK_TIMER_0 : //1
		SeTBit(TIMER0_TCCR0,CS00);
 392:	81 60       	ori	r24, 0x01	; 1
 394:	83 bf       	out	0x33, r24	; 51
		ClearBit(TIMER0_TCCR0,CS01);
 396:	83 b7       	in	r24, 0x33	; 51
 398:	8d 7f       	andi	r24, 0xFD	; 253
 39a:	f3 cf       	rjmp	.-26     	; 0x382 <Timer_Start+0x74>
	if(Copy_uint8_TimerChannel == (TIMER0 ))
	{
	switch(Copy_uint32_TickCounts)
	{
	case NO_CLOCK_TIMER_0 : //0
		ClearBit(TIMER0_TCCR0,CS00);
 39c:	8e 7f       	andi	r24, 0xFE	; 254
 39e:	83 bf       	out	0x33, r24	; 51
		ClearBit(TIMER0_TCCR0,CS01);
 3a0:	83 b7       	in	r24, 0x33	; 51
 3a2:	8d 7f       	andi	r24, 0xFD	; 253
 3a4:	ee cf       	rjmp	.-36     	; 0x382 <Timer_Start+0x74>
		SeTBit(TIMER0_TCCR0,CS02);
		SeTBit(TIMER0_TCCR0,CS01);

		break;
	case F_EXTERNAL_CLOCK_RISING_TIMER_0: //7
		SeTBit(TIMER0_TCCR0,CS00);
 3a6:	81 60       	ori	r24, 0x01	; 1
 3a8:	83 bf       	out	0x33, r24	; 51
		SeTBit(TIMER0_TCCR0,CS01);
 3aa:	83 b7       	in	r24, 0x33	; 51
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	da cf       	rjmp	.-76     	; 0x364 <Timer_Start+0x56>
	}

	else if (Copy_uint8_TimerChannel == ( TIMER2 ))
	{
		
		switch(Copy_uint32_TickCounts)
 3b0:	48 30       	cpi	r20, 0x08	; 8
 3b2:	51 05       	cpc	r21, r1
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <Timer_Start+0xaa>
 3b6:	b0 cf       	rjmp	.-160    	; 0x318 <Timer_Start+0xa>
 3b8:	fa 01       	movw	r30, r20
 3ba:	e6 5c       	subi	r30, 0xC6	; 198
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
		ClearBit(TIMER2_TCCR2,CS00);
		ClearBit(TIMER2_TCCR2,CS01);
		SeTBit(TIMER2_TCCR2,CS02);
		break;
	case F_CPU_CLOCK_1024_TIMER_2: //5
		SeTBit(TIMER2_TCCR2,CS00);
 3be:	85 b5       	in	r24, 0x25	; 37
	}

	else if (Copy_uint8_TimerChannel == ( TIMER2 ))
	{
		
		switch(Copy_uint32_TickCounts)
 3c0:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__tablejump2__>
		SeTBit(TIMER1_TCCR1B,CS00);
		ClearBit(TIMER1_TCCR1B,CS01);
		SeTBit(TIMER1_TCCR1B,CS02);
		break;
	case F_EXTERNAL_CLOCK_FALLING_TIMER_1: //6
		ClearBit(TIMER1_TCCR1B,CS00);
 3c4:	8e 7f       	andi	r24, 0xFE	; 254
 3c6:	8e bd       	out	0x2e, r24	; 46
		SeTBit(TIMER1_TCCR1B,CS02);
 3c8:	8e b5       	in	r24, 0x2e	; 46
 3ca:	84 60       	ori	r24, 0x04	; 4
 3cc:	8e bd       	out	0x2e, r24	; 46
		SeTBit(TIMER1_TCCR1B,CS01);
 3ce:	8e b5       	in	r24, 0x2e	; 46
 3d0:	82 60       	ori	r24, 0x02	; 2
 3d2:	8e bd       	out	0x2e, r24	; 46
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 3d4:	80 e0       	ldi	r24, 0x00	; 0
	case F_EXTERNAL_CLOCK_FALLING_TIMER_1: //6
		ClearBit(TIMER1_TCCR1B,CS00);
		SeTBit(TIMER1_TCCR1B,CS02);
		SeTBit(TIMER1_TCCR1B,CS01);

		break;
 3d6:	08 95       	ret
		ClearBit(TIMER1_TCCR1B,CS00);
		ClearBit(TIMER1_TCCR1B,CS01);
		SeTBit(TIMER1_TCCR1B,CS02);
		break;
	case F_CPU_CLOCK_1024_TIMER_1: //5
		SeTBit(TIMER1_TCCR1B,CS00);
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	8e bd       	out	0x2e, r24	; 46
		ClearBit(TIMER1_TCCR1B,CS01);
 3dc:	8e b5       	in	r24, 0x2e	; 46
 3de:	8d 7f       	andi	r24, 0xFD	; 253
		SeTBit(TIMER1_TCCR1B,CS01);

		break;
	case F_EXTERNAL_CLOCK_RISING_TIMER_1: //7
		SeTBit(TIMER1_TCCR1B,CS00);
		SeTBit(TIMER1_TCCR1B,CS01);
 3e0:	8e bd       	out	0x2e, r24	; 46
		SeTBit(TIMER1_TCCR1B,CS02);
 3e2:	8e b5       	in	r24, 0x2e	; 46
 3e4:	84 60       	ori	r24, 0x04	; 4
 3e6:	8e bd       	out	0x2e, r24	; 46
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case F_EXTERNAL_CLOCK_RISING_TIMER_1: //7
		SeTBit(TIMER1_TCCR1B,CS00);
		SeTBit(TIMER1_TCCR1B,CS01);
		SeTBit(TIMER1_TCCR1B,CS02);
		break;
 3ea:	08 95       	ret
		SeTBit(TIMER1_TCCR1B,CS00);
		SeTBit(TIMER1_TCCR1B,CS01);
		ClearBit(TIMER1_TCCR1B,CS02);
		break;
	case F_CPU_CLOCK_256_TIMER_1: //4
		ClearBit(TIMER1_TCCR1B,CS00);
 3ec:	8e 7f       	andi	r24, 0xFE	; 254
 3ee:	8e bd       	out	0x2e, r24	; 46
		ClearBit(TIMER1_TCCR1B,CS01);
 3f0:	8e b5       	in	r24, 0x2e	; 46
 3f2:	8d 7f       	andi	r24, 0xFD	; 253
 3f4:	f5 cf       	rjmp	.-22     	; 0x3e0 <Timer_Start+0xd2>
		ClearBit(TIMER1_TCCR1B,CS00);
		SeTBit(TIMER1_TCCR1B,CS01);
		ClearBit(TIMER1_TCCR1B,CS02);
		break;
	case F_CPU_CLOCK_64_TIMER_1: //3
		SeTBit(TIMER1_TCCR1B,CS00);
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	8e bd       	out	0x2e, r24	; 46
		SeTBit(TIMER1_TCCR1B,CS01);
 3fa:	8e b5       	in	r24, 0x2e	; 46
 3fc:	82 60       	ori	r24, 0x02	; 2
 3fe:	8e bd       	out	0x2e, r24	; 46
		ClearBit(TIMER1_TCCR1B,CS02);
 400:	8e b5       	in	r24, 0x2e	; 46
 402:	8b 7f       	andi	r24, 0xFB	; 251
 404:	8e bd       	out	0x2e, r24	; 46
 406:	88 cf       	rjmp	.-240    	; 0x318 <Timer_Start+0xa>
		SeTBit(TIMER1_TCCR1B,CS00);
		ClearBit(TIMER1_TCCR1B,CS01);
		ClearBit(TIMER1_TCCR1B,CS02);
		break;
	case F_CPU_CLOCK_8_TIMER_1 : //2
		ClearBit(TIMER1_TCCR1B,CS00);
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	f6 cf       	rjmp	.-20     	; 0x3f8 <Timer_Start+0xea>
		ClearBit(TIMER1_TCCR1B,CS00);
		ClearBit(TIMER1_TCCR1B,CS01);
		ClearBit(TIMER1_TCCR1B,CS02);
		break;
	case F_CPU_CLOCK_TIMER_1 : //1
		SeTBit(TIMER1_TCCR1B,CS00);
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	8e bd       	out	0x2e, r24	; 46
		ClearBit(TIMER1_TCCR1B,CS01);
 410:	8e b5       	in	r24, 0x2e	; 46
 412:	8d 7f       	andi	r24, 0xFD	; 253
 414:	f4 cf       	rjmp	.-24     	; 0x3fe <Timer_Start+0xf0>
	{
		
		switch(Copy_uint32_TickCounts)
	{
	case NO_CLOCK_TIMER_1 : //0
		ClearBit(TIMER1_TCCR1B,CS00);
 416:	8e 7f       	andi	r24, 0xFE	; 254
 418:	8e bd       	out	0x2e, r24	; 46
		ClearBit(TIMER1_TCCR1B,CS01);
 41a:	8e b5       	in	r24, 0x2e	; 46
 41c:	8d 7f       	andi	r24, 0xFD	; 253
 41e:	ef cf       	rjmp	.-34     	; 0x3fe <Timer_Start+0xf0>
		SeTBit(TIMER1_TCCR1B,CS02);
		SeTBit(TIMER1_TCCR1B,CS01);

		break;
	case F_EXTERNAL_CLOCK_RISING_TIMER_1: //7
		SeTBit(TIMER1_TCCR1B,CS00);
 420:	81 60       	ori	r24, 0x01	; 1
 422:	8e bd       	out	0x2e, r24	; 46
		SeTBit(TIMER1_TCCR1B,CS01);
 424:	8e b5       	in	r24, 0x2e	; 46
 426:	82 60       	ori	r24, 0x02	; 2
 428:	db cf       	rjmp	.-74     	; 0x3e0 <Timer_Start+0xd2>
		SeTBit(TIMER2_TCCR2,CS00);
		SeTBit(TIMER2_TCCR2,CS01);
		ClearBit(TIMER2_TCCR2,CS02);
		break;
	case F_CPU_CLOCK_256_TIMER_2: //4
		ClearBit(TIMER2_TCCR2,CS00);
 42a:	8e 7f       	andi	r24, 0xFE	; 254
 42c:	85 bd       	out	0x25, r24	; 37
		ClearBit(TIMER2_TCCR2,CS01);
 42e:	85 b5       	in	r24, 0x25	; 37
 430:	8d 7f       	andi	r24, 0xFD	; 253
		SeTBit(TIMER2_TCCR2,CS01);

		break;
	case F_CPU_CLOCK_128_TIMER_2: //7
		SeTBit(TIMER2_TCCR2,CS00);
		SeTBit(TIMER2_TCCR2,CS01);
 432:	85 bd       	out	0x25, r24	; 37
		SeTBit(TIMER2_TCCR2,CS02);
 434:	85 b5       	in	r24, 0x25	; 37
 436:	84 60       	ori	r24, 0x04	; 4
 438:	85 bd       	out	0x25, r24	; 37
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 43a:	80 e0       	ldi	r24, 0x00	; 0
		break;
	case F_CPU_CLOCK_128_TIMER_2: //7
		SeTBit(TIMER2_TCCR2,CS00);
		SeTBit(TIMER2_TCCR2,CS01);
		SeTBit(TIMER2_TCCR2,CS02);
		break;
 43c:	08 95       	ret
		SeTBit(TIMER2_TCCR2,CS02);
		SeTBit(TIMER2_TCCR2,CS01);

		break;
	case F_CPU_CLOCK_128_TIMER_2: //7
		SeTBit(TIMER2_TCCR2,CS00);
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	85 bd       	out	0x25, r24	; 37
		SeTBit(TIMER2_TCCR2,CS01);
 442:	85 b5       	in	r24, 0x25	; 37
 444:	82 60       	ori	r24, 0x02	; 2
 446:	f5 cf       	rjmp	.-22     	; 0x432 <Timer_Start+0x124>
		ClearBit(TIMER2_TCCR2,CS00);
		SeTBit(TIMER2_TCCR2,CS01);
		ClearBit(TIMER2_TCCR2,CS02);
		break;
	case F_CPU_CLOCK_64_TIMER_2: //3
		SeTBit(TIMER2_TCCR2,CS00);
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	85 bd       	out	0x25, r24	; 37
		SeTBit(TIMER2_TCCR2,CS01);
 44c:	85 b5       	in	r24, 0x25	; 37
 44e:	82 60       	ori	r24, 0x02	; 2
 450:	85 bd       	out	0x25, r24	; 37
		ClearBit(TIMER2_TCCR2,CS02);
 452:	85 b5       	in	r24, 0x25	; 37
 454:	8b 7f       	andi	r24, 0xFB	; 251
 456:	85 bd       	out	0x25, r24	; 37
 458:	5f cf       	rjmp	.-322    	; 0x318 <Timer_Start+0xa>
		SeTBit(TIMER2_TCCR2,CS00);
		ClearBit(TIMER2_TCCR2,CS01);
		SeTBit(TIMER2_TCCR2,CS02);
		break;
	case F_CPU_CLOCK_32_TIMER_2: //6
		ClearBit(TIMER2_TCCR2,CS00);
 45a:	8e 7f       	andi	r24, 0xFE	; 254
 45c:	85 bd       	out	0x25, r24	; 37
		SeTBit(TIMER2_TCCR2,CS02);
 45e:	85 b5       	in	r24, 0x25	; 37
 460:	84 60       	ori	r24, 0x04	; 4
 462:	85 bd       	out	0x25, r24	; 37
		SeTBit(TIMER2_TCCR2,CS01);
 464:	85 b5       	in	r24, 0x25	; 37
 466:	82 60       	ori	r24, 0x02	; 2
 468:	85 bd       	out	0x25, r24	; 37
 * Output    : Error Checking
 *_______________________________________________________________________________________________________________________________*/
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
	/*Implement Your Code*/
		uint8_t Local_u8Error=ERROR_OK;
 46a:	80 e0       	ldi	r24, 0x00	; 0
	case F_CPU_CLOCK_32_TIMER_2: //6
		ClearBit(TIMER2_TCCR2,CS00);
		SeTBit(TIMER2_TCCR2,CS02);
		SeTBit(TIMER2_TCCR2,CS01);

		break;
 46c:	08 95       	ret
		SeTBit(TIMER2_TCCR2,CS00);
		ClearBit(TIMER2_TCCR2,CS01);
		ClearBit(TIMER2_TCCR2,CS02);
		break;
	case F_CPU_CLOCK_8_TIMER_2 : //2
		ClearBit(TIMER2_TCCR2,CS00);
 46e:	8e 7f       	andi	r24, 0xFE	; 254
 470:	ec cf       	rjmp	.-40     	; 0x44a <Timer_Start+0x13c>
		ClearBit(TIMER2_TCCR2,CS00);
		ClearBit(TIMER2_TCCR2,CS01);
		ClearBit(TIMER2_TCCR2,CS02);
		break;
	case F_CPU_CLOCK_TIMER_2 : //1
		SeTBit(TIMER2_TCCR2,CS00);
 472:	81 60       	ori	r24, 0x01	; 1
 474:	85 bd       	out	0x25, r24	; 37
		ClearBit(TIMER2_TCCR2,CS01);
 476:	85 b5       	in	r24, 0x25	; 37
 478:	8d 7f       	andi	r24, 0xFD	; 253
 47a:	ea cf       	rjmp	.-44     	; 0x450 <Timer_Start+0x142>
	{
		
		switch(Copy_uint32_TickCounts)
	{
	case NO_CLOCK_TIMER_2 : //0
		ClearBit(TIMER2_TCCR2,CS00);
 47c:	8e 7f       	andi	r24, 0xFE	; 254
 47e:	85 bd       	out	0x25, r24	; 37
		ClearBit(TIMER2_TCCR2,CS01);
 480:	85 b5       	in	r24, 0x25	; 37
 482:	8d 7f       	andi	r24, 0xFD	; 253
 484:	e5 cf       	rjmp	.-54     	; 0x450 <Timer_Start+0x142>
		ClearBit(TIMER2_TCCR2,CS00);
		ClearBit(TIMER2_TCCR2,CS01);
		SeTBit(TIMER2_TCCR2,CS02);
		break;
	case F_CPU_CLOCK_1024_TIMER_2: //5
		SeTBit(TIMER2_TCCR2,CS00);
 486:	81 60       	ori	r24, 0x01	; 1
 488:	85 bd       	out	0x25, r24	; 37
		ClearBit(TIMER2_TCCR2,CS01);
 48a:	85 b5       	in	r24, 0x25	; 37
 48c:	8d 7f       	andi	r24, 0xFD	; 253
 48e:	d1 cf       	rjmp	.-94     	; 0x432 <Timer_Start+0x124>

00000490 <TIMER0_void_COMM>:

void TIMER_voidWrite(uint8_t Copy_u8Int_DATA){
	TIMER0_TCNT0=Copy_u8Int_DATA;
}
void TIMER0_void_COMM(void){
	ClearBit(TIMER0_TCCR0,COM00);
 490:	83 b7       	in	r24, 0x33	; 51
 492:	8f 7e       	andi	r24, 0xEF	; 239
 494:	83 bf       	out	0x33, r24	; 51
	SeTBit(TIMER0_TCCR0,COM01);
 496:	83 b7       	in	r24, 0x33	; 51
 498:	80 62       	ori	r24, 0x20	; 32
 49a:	83 bf       	out	0x33, r24	; 51
 49c:	08 95       	ret

0000049e <TIMER0_void_OCR0>:



void TIMER0_void_OCR0(uint8_t Copy_u8Int_d){

	TIMER0_OCR0=Copy_u8Int_d;
 49e:	8c bf       	out	0x3c, r24	; 60
 4a0:	08 95       	ret

000004a2 <USART_voidInit>:
void __vector_14(void) __attribute__((signal));
void __vector_15(void) __attribute__((signal));

void USART_voidInit(void)
{
	UBRRH=(uint8_t)(MYUBRR>>8);		    //MYUBBR is the value of UBRR.
 4a2:	10 bc       	out	0x20, r1	; 32
	UBRRL=(uint8_t)(MYUBRR);
 4a4:	83 e3       	ldi	r24, 0x33	; 51
 4a6:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);   // Enabling the Transmitter and the Receiver.
 4a8:	88 e1       	ldi	r24, 0x18	; 24
 4aa:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<7)|(1<<2)|(1<<1);  // Configure character size of 8 bits, Asynchronous mode and 1 stop bit.
 4ac:	86 e8       	ldi	r24, 0x86	; 134
 4ae:	80 bd       	out	0x20, r24	; 32
 4b0:	08 95       	ret

000004b2 <USART_uint8_tReceive>:
	UDR=Copy_uint8_tData;
}

uint8_t USART_uint8_tReceive(void)
{
	while(!(UCSRA & (1<<7) ));  //Polling on RXC bit to check if the reception complete
 4b2:	5f 9b       	sbis	0x0b, 7	; 11
 4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <USART_uint8_tReceive>
	return UDR;
 4b6:	8c b1       	in	r24, 0x0c	; 12

}
 4b8:	08 95       	ret

000004ba <__vector_13>:
	{
		Global_uint8_tPtr[2]=Copy_uint8_tPtr;
	}
}
void __vector_13(void)
{
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	2f 93       	push	r18
 4c6:	3f 93       	push	r19
 4c8:	4f 93       	push	r20
 4ca:	5f 93       	push	r21
 4cc:	6f 93       	push	r22
 4ce:	7f 93       	push	r23
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	af 93       	push	r26
 4d6:	bf 93       	push	r27
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
	if(Global_uint8_tPtr[0]!=NULL)
 4dc:	e0 91 66 00 	lds	r30, 0x0066
 4e0:	f0 91 67 00 	lds	r31, 0x0067
 4e4:	ef 3f       	cpi	r30, 0xFF	; 255
 4e6:	8f e0       	ldi	r24, 0x0F	; 15
 4e8:	f8 07       	cpc	r31, r24
 4ea:	09 f0       	breq	.+2      	; 0x4ee <__vector_13+0x34>
		(*Global_uint8_tPtr[0])();  // Executing the function whose address is carried by this pointer
 4ec:	09 95       	icall
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_14>:



void __vector_14(void)
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	if(Global_uint8_tPtr[1]!=NULL)
 532:	e0 91 68 00 	lds	r30, 0x0068
 536:	f0 91 69 00 	lds	r31, 0x0069
 53a:	ef 3f       	cpi	r30, 0xFF	; 255
 53c:	8f e0       	ldi	r24, 0x0F	; 15
 53e:	f8 07       	cpc	r31, r24
 540:	09 f0       	breq	.+2      	; 0x544 <__vector_14+0x34>
		(*Global_uint8_tPtr[1])();  // Executing the function whose address is carried by this pointer
 542:	09 95       	icall
}
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	bf 91       	pop	r27
 54a:	af 91       	pop	r26
 54c:	9f 91       	pop	r25
 54e:	8f 91       	pop	r24
 550:	7f 91       	pop	r23
 552:	6f 91       	pop	r22
 554:	5f 91       	pop	r21
 556:	4f 91       	pop	r20
 558:	3f 91       	pop	r19
 55a:	2f 91       	pop	r18
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <__vector_15>:

void __vector_15(void)
{
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	11 24       	eor	r1, r1
 570:	2f 93       	push	r18
 572:	3f 93       	push	r19
 574:	4f 93       	push	r20
 576:	5f 93       	push	r21
 578:	6f 93       	push	r22
 57a:	7f 93       	push	r23
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
 580:	af 93       	push	r26
 582:	bf 93       	push	r27
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
	if(Global_uint8_tPtr[2]!=NULL)
 588:	e0 91 6a 00 	lds	r30, 0x006A
 58c:	f0 91 6b 00 	lds	r31, 0x006B
 590:	ef 3f       	cpi	r30, 0xFF	; 255
 592:	8f e0       	ldi	r24, 0x0F	; 15
 594:	f8 07       	cpc	r31, r24
 596:	09 f0       	breq	.+2      	; 0x59a <__vector_15+0x34>
		(*Global_uint8_tPtr[2])();  // Executing the function whose address is carried by this pointer
 598:	09 95       	icall
}
 59a:	ff 91       	pop	r31
 59c:	ef 91       	pop	r30
 59e:	bf 91       	pop	r27
 5a0:	af 91       	pop	r26
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	7f 91       	pop	r23
 5a8:	6f 91       	pop	r22
 5aa:	5f 91       	pop	r21
 5ac:	4f 91       	pop	r20
 5ae:	3f 91       	pop	r19
 5b0:	2f 91       	pop	r18
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <LCD_sendCommand>:
	 	 * E enable bit high-to-low pulse.
	 	 * delay about 20ms.
	 	 * send cmd.
	 	 * delay about 20ms.
	 */
	ClearBit(LCD_CONTROL_PORT, LCD_RS);
 5bc:	d8 98       	cbi	0x1b, 0	; 27
	ClearBit(LCD_CONTROL_PORT, LCD_RW);
 5be:	d9 98       	cbi	0x1b, 1	; 27
	high_to_low_pulse();
#elif LCD_MODE == 4

#ifdef HIGH_PINS
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (cmd  & 0xF0);
 5c0:	2b b3       	in	r18, 0x1b	; 27
 5c2:	98 2f       	mov	r25, r24
 5c4:	90 7f       	andi	r25, 0xF0	; 240
 5c6:	2f 70       	andi	r18, 0x0F	; 15
 5c8:	92 2b       	or	r25, r18
 5ca:	9b bb       	out	0x1b, r25	; 27
	_delay_ms(time);
}

static void high_to_low_pulse()
{
	SeTBit(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
 5cc:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ce:	2f ef       	ldi	r18, 0xFF	; 255
 5d0:	39 ef       	ldi	r19, 0xF9	; 249
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	21 50       	subi	r18, 0x01	; 1
 5d6:	30 40       	sbci	r19, 0x00	; 0
 5d8:	90 40       	sbci	r25, 0x00	; 0
 5da:	e1 f7       	brne	.-8      	; 0x5d4 <LCD_sendCommand+0x18>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <LCD_sendCommand+0x22>
 5de:	00 00       	nop
	wait(20);
	ClearBit(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
 5e0:	da 98       	cbi	0x1b, 2	; 27
 5e2:	ef e9       	ldi	r30, 0x9F	; 159
 5e4:	ff e0       	ldi	r31, 0x0F	; 15
 5e6:	31 97       	sbiw	r30, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_sendCommand+0x2a>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_sendCommand+0x30>
 5ec:	00 00       	nop
#ifdef HIGH_PINS
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (cmd  & 0xF0);
	high_to_low_pulse();
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (cmd << 4);
 5ee:	2b b3       	in	r18, 0x1b	; 27
 5f0:	f0 e1       	ldi	r31, 0x10	; 16
 5f2:	8f 9f       	mul	r24, r31
 5f4:	c0 01       	movw	r24, r0
 5f6:	11 24       	eor	r1, r1
 5f8:	2f 70       	andi	r18, 0x0F	; 15
 5fa:	28 2b       	or	r18, r24
 5fc:	2b bb       	out	0x1b, r18	; 27
	_delay_ms(time);
}

static void high_to_low_pulse()
{
	SeTBit(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
 5fe:	da 9a       	sbi	0x1b, 2	; 27
 600:	2f ef       	ldi	r18, 0xFF	; 255
 602:	39 ef       	ldi	r19, 0xF9	; 249
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	21 50       	subi	r18, 0x01	; 1
 608:	30 40       	sbci	r19, 0x00	; 0
 60a:	80 40       	sbci	r24, 0x00	; 0
 60c:	e1 f7       	brne	.-8      	; 0x606 <LCD_sendCommand+0x4a>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <LCD_sendCommand+0x54>
 610:	00 00       	nop
	wait(20);
	ClearBit(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
 612:	da 98       	cbi	0x1b, 2	; 27
 614:	ef e9       	ldi	r30, 0x9F	; 159
 616:	ff e0       	ldi	r31, 0x0F	; 15
 618:	31 97       	sbiw	r30, 0x01	; 1
 61a:	f1 f7       	brne	.-4      	; 0x618 <LCD_sendCommand+0x5c>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <LCD_sendCommand+0x62>
 61e:	00 00       	nop
 620:	08 95       	ret

00000622 <LCD_init>:
	 * init all ports D0 .. D7 as output port.
	 * RS, RW, ENABLE pins     as output port.
	 * in 8-bit mode to init.
	 */
	//init RS, RW, ENABLE pins.
	SeTBit(LCD_CONTROL_DDR, LCD_RS);
 622:	d0 9a       	sbi	0x1a, 0	; 26
	SeTBit(LCD_CONTROL_DDR, LCD_RW);
 624:	d1 9a       	sbi	0x1a, 1	; 26
	SeTBit(LCD_CONTROL_DDR, LCD_ENABLE_PIN);
 626:	d2 9a       	sbi	0x1a, 2	; 26
	//init ports as output pins.
	LCD_DDR = LCD_DDR | 0x7F;
	LCD_sendCommand(0x38);
#elif LCD_MODE == 4
#ifdef HIGH_PINS
	LCD_DDR = LCD_DDR | 0xF0;
 628:	8a b3       	in	r24, 0x1a	; 26
 62a:	80 6f       	ori	r24, 0xF0	; 240
 62c:	8a bb       	out	0x1a, r24	; 26
#else
	LCD_DDR = LCD_DDR  | 0x0F;
#endif
	LCD_sendCommand(0x33);
 62e:	83 e3       	ldi	r24, 0x33	; 51
 630:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_sendCommand>
	LCD_sendCommand(0x32);
 634:	82 e3       	ldi	r24, 0x32	; 50
 636:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_sendCommand>
	LCD_sendCommand(0x28);
 63a:	88 e2       	ldi	r24, 0x28	; 40
 63c:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_sendCommand>
#else
	#error "Error Wrong mode for LCD"
#endif
	LCD_sendCommand(0x0E);
 640:	8e e0       	ldi	r24, 0x0E	; 14
 642:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_sendCommand>
	LCD_sendCommand(0x01);
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_sendCommand>
 64c:	8f e9       	ldi	r24, 0x9F	; 159
 64e:	9f e0       	ldi	r25, 0x0F	; 15
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <LCD_init+0x2e>
 654:	00 c0       	rjmp	.+0      	; 0x656 <LCD_init+0x34>
 656:	00 00       	nop
 658:	08 95       	ret

0000065a <LCD_displayString>:
 */
void LCD_displayString(uint8_t * string)
{
	uint8_t i = 0;

	while( *(string + i) != '\0' )
 65a:	fc 01       	movw	r30, r24
 65c:	20 81       	ld	r18, Z
 65e:	22 23       	and	r18, r18
 660:	d1 f1       	breq	.+116    	; 0x6d6 <LCD_displayString+0x7c>
/*
 * Display string.
 */
void LCD_displayString(uint8_t * string)
{
	uint8_t i = 0;
 662:	50 e0       	ldi	r21, 0x00	; 0
	 * E High-to-low pulse.
	 * delay.
	 * Write Data.
	 * delay to latch.
	 */
	SeTBit(LCD_CONTROL_PORT,   LCD_RS);
 664:	d8 9a       	sbi	0x1b, 0	; 27
	ClearBit(LCD_CONTROL_PORT, LCD_RW);
 666:	d9 98       	cbi	0x1b, 1	; 27
	high_to_low_pulse();
#elif LCD_MODE == 4

#ifdef HIGH_PINS
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (character  & 0xF0);
 668:	4b b3       	in	r20, 0x1b	; 27
 66a:	32 2f       	mov	r19, r18
 66c:	30 7f       	andi	r19, 0xF0	; 240
 66e:	4f 70       	andi	r20, 0x0F	; 15
 670:	34 2b       	or	r19, r20
 672:	3b bb       	out	0x1b, r19	; 27
	_delay_ms(time);
}

static void high_to_low_pulse()
{
	SeTBit(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
 674:	da 9a       	sbi	0x1b, 2	; 27
 676:	ff ef       	ldi	r31, 0xFF	; 255
 678:	39 ef       	ldi	r19, 0xF9	; 249
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	f1 50       	subi	r31, 0x01	; 1
 67e:	30 40       	sbci	r19, 0x00	; 0
 680:	40 40       	sbci	r20, 0x00	; 0
 682:	e1 f7       	brne	.-8      	; 0x67c <LCD_displayString+0x22>
 684:	00 c0       	rjmp	.+0      	; 0x686 <LCD_displayString+0x2c>
 686:	00 00       	nop
	wait(20);
	ClearBit(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
 688:	da 98       	cbi	0x1b, 2	; 27
 68a:	ef e9       	ldi	r30, 0x9F	; 159
 68c:	ff e0       	ldi	r31, 0x0F	; 15
 68e:	31 97       	sbiw	r30, 0x01	; 1
 690:	f1 f7       	brne	.-4      	; 0x68e <LCD_displayString+0x34>
 692:	00 c0       	rjmp	.+0      	; 0x694 <LCD_displayString+0x3a>
 694:	00 00       	nop
#ifdef HIGH_PINS
	//Send high nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (character  & 0xF0);
	high_to_low_pulse();
	//send low nibble.
	LCD_PORT = (LCD_PORT & 0x0F) |  (character << 4);
 696:	4b b3       	in	r20, 0x1b	; 27
 698:	f0 e1       	ldi	r31, 0x10	; 16
 69a:	2f 9f       	mul	r18, r31
 69c:	90 01       	movw	r18, r0
 69e:	11 24       	eor	r1, r1
 6a0:	4f 70       	andi	r20, 0x0F	; 15
 6a2:	42 2b       	or	r20, r18
 6a4:	4b bb       	out	0x1b, r20	; 27
	_delay_ms(time);
}

static void high_to_low_pulse()
{
	SeTBit(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
 6a6:	da 9a       	sbi	0x1b, 2	; 27
 6a8:	2f ef       	ldi	r18, 0xFF	; 255
 6aa:	39 ef       	ldi	r19, 0xF9	; 249
 6ac:	40 e0       	ldi	r20, 0x00	; 0
 6ae:	21 50       	subi	r18, 0x01	; 1
 6b0:	30 40       	sbci	r19, 0x00	; 0
 6b2:	40 40       	sbci	r20, 0x00	; 0
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <LCD_displayString+0x54>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <LCD_displayString+0x5e>
 6b8:	00 00       	nop
	wait(20);
	ClearBit(LCD_CONTROL_PORT, LCD_ENABLE_PIN);
 6ba:	da 98       	cbi	0x1b, 2	; 27
 6bc:	ef e9       	ldi	r30, 0x9F	; 159
 6be:	ff e0       	ldi	r31, 0x0F	; 15
 6c0:	31 97       	sbiw	r30, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <LCD_displayString+0x66>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <LCD_displayString+0x6c>
 6c6:	00 00       	nop
	uint8_t i = 0;

	while( *(string + i) != '\0' )
	{
		LCD_displayCharacter(*(string + i));
		i++;
 6c8:	5f 5f       	subi	r21, 0xFF	; 255
 */
void LCD_displayString(uint8_t * string)
{
	uint8_t i = 0;

	while( *(string + i) != '\0' )
 6ca:	fc 01       	movw	r30, r24
 6cc:	e5 0f       	add	r30, r21
 6ce:	f1 1d       	adc	r31, r1
 6d0:	20 81       	ld	r18, Z
 6d2:	21 11       	cpse	r18, r1
 6d4:	c7 cf       	rjmp	.-114    	; 0x664 <LCD_displayString+0xa>
 6d6:	08 95       	ret

000006d8 <Motor_Intial>:
 */ 
#include "Motor.h"


void Motor_Intial(Motor *Motor)
{
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	00 d0       	rcall	.+0      	; 0x6de <Motor_Intial+0x6>
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
	USART_voidInit();
 6e2:	89 83       	std	Y+1, r24	; 0x01
 6e4:	9a 83       	std	Y+2, r25	; 0x02
 6e6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <USART_voidInit>
	Timer_Init(&Motor->timer);
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
 6ec:	9a 81       	ldd	r25, Y+2	; 0x02
 6ee:	0e 94 1f 01 	call	0x23e	; 0x23e <Timer_Init>
	Timer_Start( 0,5);
 6f2:	45 e0       	ldi	r20, 0x05	; 5
 6f4:	50 e0       	ldi	r21, 0x00	; 0
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	0e 94 87 01 	call	0x30e	; 0x30e <Timer_Start>
	TIMER0_void_COMM();
 700:	0e 94 48 02 	call	0x490	; 0x490 <TIMER0_void_COMM>
	TIMER0_void_OCR0(127);
 704:	8f e7       	ldi	r24, 0x7F	; 127
 706:	90 e0       	ldi	r25, 0x00	; 0
}
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
{
	USART_voidInit();
	Timer_Init(&Motor->timer);
	Timer_Start( 0,5);
	TIMER0_void_COMM();
	TIMER0_void_OCR0(127);
 710:	0c 94 4f 02 	jmp	0x49e	; 0x49e <TIMER0_void_OCR0>

00000714 <Motor_Operate>:
}

uint8_t  Motor_Operate(void)
{
	TIMER0_OCR0=USART_uint8_tReceive();
 714:	0e 94 59 02 	call	0x4b2	; 0x4b2 <USART_uint8_tReceive>
 718:	8c bf       	out	0x3c, r24	; 60
	
	x=(TIMER0_OCR0*100/255);
 71a:	8c b7       	in	r24, 0x3c	; 60
 71c:	24 e6       	ldi	r18, 0x64	; 100
 71e:	82 9f       	mul	r24, r18
 720:	c0 01       	movw	r24, r0
 722:	11 24       	eor	r1, r1
 724:	6f ef       	ldi	r22, 0xFF	; 255
 726:	70 e0       	ldi	r23, 0x00	; 0
 728:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__divmodhi4>
	if(x%2!=0)
 72c:	60 fd       	sbrc	r22, 0
	{
		x+=1;
 72e:	6f 5f       	subi	r22, 0xFF	; 255
 730:	60 93 6f 00 	sts	0x006F, r22
 734:	86 2f       	mov	r24, r22
	}
	return x;
}
 736:	08 95       	ret

00000738 <main>:

 uint8_t duty;
 uint8_t buffer[20];
 
int main()
{	
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	00 d0       	rcall	.+0      	; 0x73e <main+0x6>
 73e:	00 d0       	rcall	.+0      	; 0x740 <main+0x8>
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
 744:	0e 94 11 03 	call	0x622	; 0x622 <LCD_init>
    LCD_sendCommand(0x01);
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_sendCommand>
   Motor  MotorObject;
    
 Str_TimerConfiguration_t timer={0,8,FastPWM,POLLING};
	  MotorObject.timer=timer;
 74e:	19 82       	std	Y+1, r1	; 0x01
 750:	88 e0       	ldi	r24, 0x08	; 8
 752:	8a 83       	std	Y+2, r24	; 0x02
 754:	8b e0       	ldi	r24, 0x0B	; 11
 756:	8b 83       	std	Y+3, r24	; 0x03
 758:	1c 82       	std	Y+4, r1	; 0x04


    Motor_Intial(&MotorObject);
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <Motor_Intial>

   duty=(TIMER0_OCR0*100/255)+1;
 762:	8c b7       	in	r24, 0x3c	; 60
 764:	24 e6       	ldi	r18, 0x64	; 100
 766:	82 9f       	mul	r24, r18
 768:	c0 01       	movw	r24, r0
 76a:	11 24       	eor	r1, r1
 76c:	6f ef       	ldi	r22, 0xFF	; 255
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__divmodhi4>
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	86 0f       	add	r24, r22
 778:	80 93 84 00 	sts	0x0084, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 77c:	4a e0       	ldi	r20, 0x0A	; 10
 77e:	60 e7       	ldi	r22, 0x70	; 112
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	0e 94 00 04 	call	0x800	; 0x800 <__itoa_ncheck>

   itoa(duty,buffer,10);
 
	LCD_displayString (buffer);
 788:	80 e7       	ldi	r24, 0x70	; 112
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 2d 03 	call	0x65a	; 0x65a <LCD_displayString>


while(1)
	{ 
		 
			duty=Motor_Operate();
 790:	0e 94 8a 03 	call	0x714	; 0x714 <Motor_Operate>
 794:	80 93 84 00 	sts	0x0084, r24
		
			LCD_sendCommand(0x01);
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_sendCommand>
			
			itoa(duty,buffer,10);
 79e:	80 91 84 00 	lds	r24, 0x0084
 7a2:	ec cf       	rjmp	.-40     	; 0x77c <main+0x44>

000007a4 <__divmodhi4>:
 7a4:	97 fb       	bst	r25, 7
 7a6:	07 2e       	mov	r0, r23
 7a8:	16 f4       	brtc	.+4      	; 0x7ae <__divmodhi4+0xa>
 7aa:	00 94       	com	r0
 7ac:	07 d0       	rcall	.+14     	; 0x7bc <__divmodhi4_neg1>
 7ae:	77 fd       	sbrc	r23, 7
 7b0:	09 d0       	rcall	.+18     	; 0x7c4 <__divmodhi4_neg2>
 7b2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__udivmodhi4>
 7b6:	07 fc       	sbrc	r0, 7
 7b8:	05 d0       	rcall	.+10     	; 0x7c4 <__divmodhi4_neg2>
 7ba:	3e f4       	brtc	.+14     	; 0x7ca <__divmodhi4_exit>

000007bc <__divmodhi4_neg1>:
 7bc:	90 95       	com	r25
 7be:	81 95       	neg	r24
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	08 95       	ret

000007c4 <__divmodhi4_neg2>:
 7c4:	70 95       	com	r23
 7c6:	61 95       	neg	r22
 7c8:	7f 4f       	sbci	r23, 0xFF	; 255

000007ca <__divmodhi4_exit>:
 7ca:	08 95       	ret

000007cc <__tablejump2__>:
 7cc:	ee 0f       	add	r30, r30
 7ce:	ff 1f       	adc	r31, r31

000007d0 <__tablejump__>:
 7d0:	05 90       	lpm	r0, Z+
 7d2:	f4 91       	lpm	r31, Z
 7d4:	e0 2d       	mov	r30, r0
 7d6:	09 94       	ijmp

000007d8 <__udivmodhi4>:
 7d8:	aa 1b       	sub	r26, r26
 7da:	bb 1b       	sub	r27, r27
 7dc:	51 e1       	ldi	r21, 0x11	; 17
 7de:	07 c0       	rjmp	.+14     	; 0x7ee <__udivmodhi4_ep>

000007e0 <__udivmodhi4_loop>:
 7e0:	aa 1f       	adc	r26, r26
 7e2:	bb 1f       	adc	r27, r27
 7e4:	a6 17       	cp	r26, r22
 7e6:	b7 07       	cpc	r27, r23
 7e8:	10 f0       	brcs	.+4      	; 0x7ee <__udivmodhi4_ep>
 7ea:	a6 1b       	sub	r26, r22
 7ec:	b7 0b       	sbc	r27, r23

000007ee <__udivmodhi4_ep>:
 7ee:	88 1f       	adc	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	5a 95       	dec	r21
 7f4:	a9 f7       	brne	.-22     	; 0x7e0 <__udivmodhi4_loop>
 7f6:	80 95       	com	r24
 7f8:	90 95       	com	r25
 7fa:	bc 01       	movw	r22, r24
 7fc:	cd 01       	movw	r24, r26
 7fe:	08 95       	ret

00000800 <__itoa_ncheck>:
 800:	bb 27       	eor	r27, r27
 802:	4a 30       	cpi	r20, 0x0A	; 10
 804:	31 f4       	brne	.+12     	; 0x812 <__itoa_ncheck+0x12>
 806:	99 23       	and	r25, r25
 808:	22 f4       	brpl	.+8      	; 0x812 <__itoa_ncheck+0x12>
 80a:	bd e2       	ldi	r27, 0x2D	; 45
 80c:	90 95       	com	r25
 80e:	81 95       	neg	r24
 810:	9f 4f       	sbci	r25, 0xFF	; 255
 812:	0c 94 0c 04 	jmp	0x818	; 0x818 <__utoa_common>

00000816 <__utoa_ncheck>:
 816:	bb 27       	eor	r27, r27

00000818 <__utoa_common>:
 818:	fb 01       	movw	r30, r22
 81a:	55 27       	eor	r21, r21
 81c:	aa 27       	eor	r26, r26
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	aa 1f       	adc	r26, r26
 824:	a4 17       	cp	r26, r20
 826:	10 f0       	brcs	.+4      	; 0x82c <__utoa_common+0x14>
 828:	a4 1b       	sub	r26, r20
 82a:	83 95       	inc	r24
 82c:	50 51       	subi	r21, 0x10	; 16
 82e:	b9 f7       	brne	.-18     	; 0x81e <__utoa_common+0x6>
 830:	a0 5d       	subi	r26, 0xD0	; 208
 832:	aa 33       	cpi	r26, 0x3A	; 58
 834:	08 f0       	brcs	.+2      	; 0x838 <__utoa_common+0x20>
 836:	a9 5d       	subi	r26, 0xD9	; 217
 838:	a1 93       	st	Z+, r26
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	79 f7       	brne	.-34     	; 0x81c <__utoa_common+0x4>
 83e:	b1 11       	cpse	r27, r1
 840:	b1 93       	st	Z+, r27
 842:	11 92       	st	Z+, r1
 844:	cb 01       	movw	r24, r22
 846:	0c 94 25 04 	jmp	0x84a	; 0x84a <strrev>

0000084a <strrev>:
 84a:	dc 01       	movw	r26, r24
 84c:	fc 01       	movw	r30, r24
 84e:	67 2f       	mov	r22, r23
 850:	71 91       	ld	r23, Z+
 852:	77 23       	and	r23, r23
 854:	e1 f7       	brne	.-8      	; 0x84e <strrev+0x4>
 856:	32 97       	sbiw	r30, 0x02	; 2
 858:	04 c0       	rjmp	.+8      	; 0x862 <__stack+0x3>
 85a:	7c 91       	ld	r23, X
 85c:	6d 93       	st	X+, r22
 85e:	70 83       	st	Z, r23
 860:	62 91       	ld	r22, -Z
 862:	ae 17       	cp	r26, r30
 864:	bf 07       	cpc	r27, r31
 866:	c8 f3       	brcs	.-14     	; 0x85a <strrev+0x10>
 868:	08 95       	ret

0000086a <_exit>:
 86a:	f8 94       	cli

0000086c <__stop_program>:
 86c:	ff cf       	rjmp	.-2      	; 0x86c <__stop_program>
